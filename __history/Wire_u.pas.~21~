unit Wire_u;

interface

uses Vcl.Graphics, Math, Generics.Collections, Winapi.Windows, Vcl.ExtCtrls, System.SysUtils;

type
  TConnector = record
    id, gateId, cableId, x, y : Integer;
    isInput : Boolean;
    constructor Create(id, gateId, cableId, x, y : Integer; isInput : Boolean);
end;

type
  TSplit = record
    id, inCableId, x, y : Integer;
    outCableId : TList<Integer>;
    constructor Create(id, inCableId : Integer; outCableId : TList<Integer>; x, y : Integer);
end;

type
  PCable = ^TCable;

  TCable = record
    id, startId, endId : Integer;
    isStartConnector, isEndConnector : Boolean; // otherwise its a split
    parentCable : PCable;
    childCables : TList<PCable>;
    path : TList<TPoint>;

    constructor Create(id : Integer; parentCable : PCable; childCables : TList<PCable>; startId : Integer; isStartConnector : Boolean; endId : Integer; isEndConnector : Boolean; path : TList<TPoint>);
end;

type
  TWire = record
    id, inputConnectorId, initX, initY : Integer;
    cables : TList<TCable>;
    outputConnectorIds : TList<Integer>;
    controls : TList<TShape>;

    constructor Create(id : Integer);
    procedure addCable(cable : TCable);
    procedure Draw(pnl : TPanel);
end;

const
  WIRE_THICKNESS = 8;

implementation

constructor TConnector.Create(id, gateId, cableId, x, y : Integer; isInput : Boolean);
begin
  Self.id := id;
  Self.gateId := gateId;
  self.cableId := cableId;
  Self.x := x;
  Self.y := y;
  Self.isInput := isInput;
end;

constructor TSplit.Create(id, inCableId : Integer; outCableId : TList<Integer>; x, y : Integer);
begin
  Self.id := id;
  Self.inCableId := inCableId;
  Self.outCableId := outCableId;
  Self.x := x;
  Self.y := y;
end;

constructor TCable.Create(id : Integer; parentCable : PCable; childCables : TList<PCable>; startId : Integer; isStartConnector : Boolean; endId : Integer; isEndConnector : Boolean; path : TList<TPoint>);
begin
  Self.id := id;
  Self.startId := startId;
  Self.isStartConnector := isStartConnector;
  Self.endId := endId;
  Self.isEndConnector := isEndConnector;
  Self.parentCable := parentCable;
  Self.childCables := childCables;
  Self.path := path;
end;

constructor TWire.Create(id : Integer);
begin
  Self.id := id;
  Self.controls := TList<TShape>.Create();
end;

procedure TWire.addCable(cable : TCable);
begin
  Self.cables.Add(cable);
  if cable.isEndConnector then
    Self.outputConnectorIds.Add(cable.endId);
end;

procedure TWire.Draw(pnl: TPanel);
var
  rects : TList<TShape>;
  splits : TList<TShape>;
  tmpShape : TShape;
  tmpCable : TCable;
  tmpPoint : TPoint;
  x1, y1, x2, y2 : Integer;
begin
  WriteLn('d1');
  rects := TList<TShape>.Create();
  splits := TList<TShape>.Create();
  for tmpCable in cables do
  begin
    WriteLn('d2');
    //WriteLn(BoolToStr(Assigned(tmpCable)));
    WriteLn(BoolToStr(Assigned(tmpCable.path)));
    WriteLn(tmpCable.path.Count);
    if tmpCable.path.Count = 0 then Exit;

    for var i := 1 to tmpCable.path.Count - 1 do
    begin
      WriteLn('d3');
      tmpShape := TShape.Create(nil);
      tmpShape.Parent := pnl;

      x1 := tmpCable.path[i - 1].X;
      y1 := tmpCable.path[i - 1].Y;
      x2 := tmpCable.path[i].X;
      y2 := tmpCable.path[i].Y;

      WriteLn('d4');

      tmpShape.Left := x1 + WIRE_THICKNESS div 2 - IfThen(x1 < x2, 0, x1 - x2 - WIRE_THICKNESS);
      tmpShape.Top := y1 + WIRE_THICKNESS div 2 - IfThen(y1 < y2, 0, y1 - y2 - WIRE_THICKNESS);

      if x1 = x2 then
      begin
        tmpShape.Height := Max(y1, y2) - Min(y1, y2) + WIRE_THICKNESS;
        tmpShape.Width := WIRE_THICKNESS;
      end
      else if y1 = y2 then
      begin
        tmpShape.Height := WIRE_THICKNESS;
        tmpShape.Width := Max(x1, x2) - Min(x1, x2) + WIRE_THICKNESS;
      end;
      WriteLn('d5');
      tmpShape.Shape := stRectangle;
      tmpShape.Brush.Color := clBlack;
      tmpShape.ShowHint := True;
      tmpShape.Hint := IntToStr(i);
      WriteLn('d6');
    end;
    rects.Add(tmpShape);
  end;
   WriteLn('d7');
  for tmpShape in controls do
  begin
    tmpShape.Destroy;
  end;

  WriteLn('d8');

  controls.AddRange(rects);
  controls.AddRange(splits);

  WriteLn('d9');
end;

end.
